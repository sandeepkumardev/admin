// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WareHouse {
  id                  String              @id @default(uuid()) @map("_id")
  contactPersonName   String
  contactPersonMobile String
  contactPersonEmail  String
  warehouseName       String              @unique
  address             String
  city                String
  state               String
  country             String
  pincode             Int
  products            WareHouseProducts[]
  orders              Order[]

  @@map("warehouses")
}

model WareHouseProducts {
  id          String    @id @default(uuid()) @map("_id")
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  warehouseId String
  warehouse   WareHouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([productId, warehouseId])
}

model Attribute {
  id            String       @id @default(uuid()) @map("_id")
  key           String
  value         String[]
  productTypeId String
  productType   ProductTypes @relation(fields: [productTypeId], references: [id], onDelete: Cascade)

  @@unique([key, productTypeId])
  @@map("attributes")
}

model Color {
  id   String @id @default(uuid()) @map("_id")
  name String @unique
  hex  String

  @@map("colors")
}

model Size {
  id    String   @id @default(uuid()) @map("_id")
  type  String   @unique
  value String[]

  @@map("sizes")
}

model Collection {
  id        String               @id @default(uuid()) @map("_id")
  name      String
  slug      String               @unique
  image     String?
  icon      String?
  banner    String
  isGallery Boolean              @default(false)
  products  CollectionProducts[]
  isActive  Boolean              @default(false)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@map("collections")
}

model CollectionProducts {
  id           String     @id @default(uuid()) @map("_id")
  productId    String
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([productId, collectionId])
  @@map("collection_products")
}

model Category {
  id        String     @id @default(uuid()) @map("_id")
  name      String
  slug      String     @unique
  wearType  String?
  parent    Category?  @relation("subCategory", fields: [parentId], references: [id])
  parentId  String?
  children  Category[] @relation("subCategory")
  products  Product[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("categories")
}

model Product {
  id             String               @id @default(uuid()) @map("_id")
  sku            String               @unique
  name           String
  slug           String               @unique
  description    String
  price          Int
  mrp            Int
  material       String
  sizeCategory   String
  genders        String[]
  inStock        Boolean              @default(true)
  isActive       Boolean              @default(true)
  isNewArrival   Boolean              @default(false)
  isBestSeller   Boolean              @default(false)
  colors         ProductColors[]
  sizes          ProductSizes[]
  images         ProductImages[]
  attributes     ProductAttributes[]
  video          String
  productTypeId  String
  productType    ProductTypes         @relation(fields: [productTypeId], references: [id], onDelete: Cascade)
  categoryId     String
  category       Category             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  CartItem       Cart[]
  WishList       WishList[]
  collections    CollectionProducts[]
  orders         OrderedItem[]
  warehouses     WareHouseProducts[]
  ProductReviews ProductReviews[]

  search_vector Unsupported("tsvector")?

  @@index([sku, slug])
  @@map("products")
}

model ProductReviews {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  rating    Float
  comment   String
  images    String[]
  isDeleted Boolean  @default(false)

  createdAt DateTime @default(now())

  @@unique([userId, productId, orderId])
  @@map("product_reviews")
}

model ProductTypes {
  id         String      @id @default(uuid()) @map("_id")
  name       String      @unique
  attributes Attribute[]
  products   Product[]

  @@map("product_types")
}

model ProductColors {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  hex       String
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?
}

model ProductAttributes {
  id        String   @id @default(uuid()) @map("_id")
  key       String
  value     String
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?
}

model ProductSizes {
  id           String   @id @default(uuid()) @map("_id")
  key          String
  value        String
  quantity     Int
  productColor String
  product      Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String?

  @@unique([key, productId, productColor])
}

model ProductImages {
  id        String   @id @default(uuid()) @map("_id")
  key       String
  color     String
  url       String
  publicId  String
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?
}

model User {
  id             String           @id @default(uuid()) @map("_id")
  name           String?
  email          String?          @unique
  phone          String?          @unique
  password       String?
  gender         String?
  onBoarded      Boolean          @default(false)
  addresses      Address[]
  orders         Order[]
  cart           Cart[]
  wishlist       WishList[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ProductReviews ProductReviews[]

  @@map("users")
}

model PasswordReset {
  email     String   @id
  token     String
  expireAt  DateTime
  createdAt DateTime @default(now())

  @@map("password_reset")
}

model EmailVerification {
  email     String   @id
  code      String
  verified  Boolean  @default(false)
  expireAt  DateTime
  createdAt DateTime @default(now())
}

model OTP {
  phone     String   @id
  otp       String
  expireAt  DateTime
  createdAt DateTime @default(now())

  @@map("otps")
}

model Address {
  id            String   @id @default(uuid()) @map("_id")
  name          String
  line1         String
  line2         String
  landmark      String
  city          String
  state         String
  country       String
  pincode       String
  phone         String
  email         String
  residenceType String
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders        Order[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("addresses")
}

model Cart {
  id        String   @id @default(uuid()) @map("_id")
  quantity  Int
  size      String
  color     String
  productId String
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model WishList {
  id        String   @id @default(uuid()) @map("_id")
  quantity  Int
  size      String?
  color     String
  productId String
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wishlists")
}

model Order {
  id              String           @id @default(uuid()) @map("_id")
  orderNumber     String           @unique
  status          String           @default("PENDING")
  timeline        OrderTimeline[]
  totalAmount     Int
  deliveryCharge  Int
  giftWrapCharge  Int
  subTotal        Int
  items           OrderedItem[]
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingId      String
  shippingAddress Address          @relation(fields: [shippingId], references: [id], onDelete: Cascade)
  pickupId        String?
  pickupAddress   WareHouse?       @relation(fields: [pickupId], references: [id])
  shipmentId      String?
  shipment        Shipment?
  paymentMode     PaymentMode
  paymentId       String?
  paymentMethod1  RazorpayPayment?
  paymentMethod2  PayUPayment?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  cancelledAt     DateTime?
  cancelledBy     String?
  ProductReviews  ProductReviews[]

  @@map("orders")
}

// waste 
model OrderTimeline {
  id        String    @id @default(uuid()) @map("_id")
  orderId   String
  Order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status    String
  date      DateTime?
  completed Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([orderId, status])
  @@map("order_timelines")
}

enum PaymentMode {
  CASH_ON_DELIVERY
  ONLINE
}

model OrderedItem {
  id         String  @id @default(uuid()) @map("_id")
  orderId    String
  Order      Order   @relation(fields: [orderId], references: [id])
  productId  String
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  color      String
  size       String
  quantity   Int
  price      Float
  totalPrice Float

  @@map("ordered_items")
}

model Shipment {
  id          String    @id @default(uuid()) @map("_id")
  platform    String
  response    Json
  pickupDate  DateTime?
  awbNumber   String?
  orderNumber String    @unique
  Order       Order     @relation(fields: [orderNumber], references: [orderNumber], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("shipments")
}

model RazorpayPayment {
  id                String   @id @default(uuid()) @map("_id")
  orderNo           String   @unique
  Order             Order    @relation(fields: [orderNo], references: [orderNumber], onDelete: Cascade)
  razorpayOrderId   String
  razorpayPaymentId String
  razorpaySignature String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("razorpay_payments")
}

model PayUPayment {
  id        String   @id @default(uuid()) @map("_id")
  orderNo   String   @unique
  Order     Order    @relation(fields: [orderNo], references: [orderNumber], onDelete: Cascade)
  payuData  Json
  txnId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payu_payments")
}
